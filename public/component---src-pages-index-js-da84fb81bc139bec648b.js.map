{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/service/auth.js","webpack:///./src/components/seo.js"],"names":["initAuth","IndexPage","state","loading","msg","handleClick","e","preventDefault","_this","setState","fetch","then","res","json","console","log","render","_this$state","this","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","title","style","maxWidth","marginBottom","onClick","gatsby__WEBPACK_IMPORTED_MODULE_1__","to","React","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","createContext","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","InternalPageRenderer","Object","assign","Header","siteTitle","react_default","background","margin","padding","gatsby_browser_entry","color","textDecoration","defaultProps","Layout","children","data","_856328897","Fragment","header","site","siteMetadata","paddingTop","Date","getFullYear","href","getUser","handleLogin","isLoggedIn","logout","netlify_identity_widget__WEBPACK_IMPORTED_MODULE_0__","netlify_identity_widget__WEBPACK_IMPORTED_MODULE_0___default","isBrowser","window","netlifyIdentity","init","localStorage","getItem","JSON","parse","setUser","user","setItem","stringify","callback","open","on","currentUser","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"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","file":"component---src-pages-index-js-da84fb81bc139bec648b.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {initAuth} from '../service/auth'\n\ninitAuth()\nclass IndexPage extends React.Component{\n  state = { loading: false, msg: null}\n  handleClick = e =>{\n    e.preventDefault()\n    this.setState({loading: true})\n    fetch('/.netlify/functions/hello-world')\n    .then(res => res.json())\n    //.then(json => this.setState({loading: false, msg: json.msg}))\n    .then(console.log);\n    \n  }\n  render(){\n\n    const { loading, msg} = this.state\n    return (\n      <Layout>\n      <SEO title=\"Home\" />\n      <h1>Hi people</h1>\n      <p>Welcome to your new Gatsby site.</p>\n      <p>Now go build something great.</p>\n      <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\n        <button onClick={this.handleClick}>\n          Call Lambda Func\n        </button>\n      </div>\n      <Link to=\"/page-2/\">Go to page 2</Link>\n    </Layout>\n    )\n  }\n}\n\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import netlifyIdentity from \"netlify-identity-widget\"\nexport const isBrowser = () => typeof window !== \"undefined\"\nexport const initAuth = () => {\n    if(isBrowser()){\n        window.netlifyIdentity = netlifyIdentity\n        netlifyIdentity.init()\n    }\n}\n\nexport const getUser = () =>\n    isBrowser() && window.localStorage.getItem(\"netlifyUser\")\n        ? JSON.parse(window.localStorage.getItem(\"netlifyUser\"))\n        : {}\n\nexport const setUser = user => \n    window.localStorage.setItem(\"netlifyUser\", JSON.stringify(user))\n\n\nexport const handleLogin = callback => {\n    if(isLoggedIn()){\n        callback(getUser())\n    }else{\n    \n        netlifyIdentity.open()\n        netlifyIdentity.on(\"login\", user => {\n            console.log(\"logmein\");        \n            setUser(user)\n            callback(user)\n        })\n    }\n}\n\nexport const isLoggedIn = () => {\n    if(!isBrowser()) return false\n    const user = netlifyIdentity.currentUser()\n    return !!user\n}\n\nexport const logout = callback => {\n    netlifyIdentity.logout()\n    netlifyIdentity.on(\"logout\", ()=> {\n        setUser({})\n        callback()\n    })\n}","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}